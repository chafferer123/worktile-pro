<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xmlns:tx="http://www.springframework.org/schema/tx"
     xmlns:jdbc="http://www.springframework.org/schema/jdbc"
     xmlns:context="http://www.springframework.org/schema/context"
     xsi:schemaLocation="
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	 http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd">

    <!--配置和创建jdbc数据源 -->
    <context:property-placeholder location="classpath:application.properties"/>
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${driverClass}"/>
        <property name="jdbcUrl" value="${url}"/>
        <property name="user" value="${username}"/>
        <property name="password" value="${password}"/>
    </bean>

    <!-- transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- enable transaction demarcation with annotations -->
    <tx:annotation-driven />

    <!-- simplest possible SqlSessionFactory configuration -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- Directly specify the location of the MyBatis mapper xml file. This
             is NOT required when using MapperScannerConfigurer or
             MapperFactoryBean; they will load the xml automatically if it is
             in the same classpath location as the DAO interface. Rather than
             directly referencing the xml files, the 'configLocation' property
             could also be used to specify the location of a MyBatis config
             file. This config file could, in turn, contain &ltmapper&gt
             elements that point to the correct mapper xml files.
         -->
        <property name="mapperLocations" value="classpath:mappers/*.xml" />
    </bean>

    <!-- simple transactional service layer bean; the userDao can be implemented in various ways with MyBatis-Spring  -->
    <bean id="blogService" class="com.zqgame.services.BlogService">
        <property name="blogMapper" ref="blogMapper" />
    </bean>
        <!-- simple transactional service layer bean; the userDao can be implemented in various ways with MyBatis-Spring  -->
    <bean id="userService" class="com.zqgame.services.UserService">
        <property name="userMapper" ref="userMapper" />
    </bean>
</beans>

